import asyncio
import logging

from aiogram import Bot, Dispatcher, F, filters, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage

from bot import handlers
from bot.filters import NoStateFilter
from bot.states import FileGetting
from settings import config
from settings.logger import configure_logging


async def setup_commands(bot: Bot):
    await bot.set_my_commands([
        types.BotCommand(command="start", description="ü§ù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    ])


async def on_startup(*args, **kwargs):
    await setup_commands(bot=kwargs['bot'])


async def on_shutdown(*args, **kwargs):
    await kwargs['dispatcher'].storage.close()


async def main():
    logger.debug("–°–æ–∑–¥–∞–µ–º storage")
    storage = RedisStorage.from_url(url=f'redis://{config.REDIS_HOST}:{config.REDIS_PORT}/{config.REDIS_DB}')
    logger.info("Storage —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, %r", storage)

    dp = Dispatcher(storage=storage)
    logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—É—Ä–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞")
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    logger.info("–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, %r", bot)

    # setting middlewares
    logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middlewares")
    logger.info("middlewares —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # setting message handlers
    logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ message")
    dp.message.register(
        handlers.sites_file_processing, FileGetting.sites_file_choosing, F.document,
    )
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ message —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # setting callback query handlers
    logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ message")
    dp.callback_query.register(handlers.btn_load_file_sites, F.data == 'btn_load_file_sites', NoStateFilter())
    dp.callback_query.register(handlers.btn_parse_table_sites, F.data == 'btn_parse_table_sites', NoStateFilter())
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ message —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # setting commands
    logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–º–∞–Ω–¥")
    dp.message.register(handlers.start, filters.CommandStart(), NoStateFilter())
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    dp.shutdown.register(on_shutdown)
    dp.startup.register(on_startup)

    logger.debug("–ó–∞–ø—É—Å–∫–∞–µ–º polling")
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    configure_logging()
    logger = logging.getLogger('__name__')
    asyncio.run(main())
